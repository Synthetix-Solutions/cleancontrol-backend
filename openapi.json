{
  "openapi": "3.0.1",
  "info": {
    "title": "CleanControl API",
    "description": "API for CleanControl",
    "termsOfService": "https://synthetix-solutions.com/legal/terms",
    "contact": {
      "name": "Contact",
      "url": "https://synthetix-solutions.com/contact"
    },
    "license": {
      "name": "License",
      "url": "https://synthetix-solutions.com/license"
    },
    "version": "v1"
  },
  "paths": {
    "/register": {
      "post": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "parameters": [
          {
            "name": "useCookies",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useSessionCookies",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/refresh": {
      "post": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/confirmEmail": {
      "get": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "operationId": "MapIdentityApi-/confirmEmail",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changedEmail",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/resendConfirmationEmail": {
      "post": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendConfirmationEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/forgotPassword": {
      "post": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/resetPassword": {
      "post": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/manage/2fa": {
      "post": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/manage/info": {
      "get": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/tibsi/brain": {
      "get": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/tibsi/dick": {
      "get": {
        "tags": [
          "CleanControlBackend, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/cleaning_runs": {
      "get": {
        "tags": [
          "Cleaning runs"
        ],
        "summary": "Retrieves all cleaning runs.",
        "description": "This method retrieves all cleaning runs that the current user has access to. It does this by getting the current\r\nuser and their role,\r\nand then filtering the cleaning runs based on the user's role. If the user is an admin, they have access to all\r\ncleaning runs.\r\nIf the user is a cleaner, they only have access to cleaning runs that are not finished and that they are a part of.\r\nThe cleaning runs are then converted to return cleaning runs and returned.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningRun"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cleaning runs"
        ],
        "summary": "Creates a new cleaning run",
        "description": "Creates a new cleaning run",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningRun"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningRun"
                }
              }
            }
          }
        }
      }
    },
    "/cleaning_runs/{cleaningRunId}": {
      "get": {
        "tags": [
          "Cleaning runs"
        ],
        "summary": "Gets a cleaning run by its ID",
        "description": "Fetches a cleaning run by its ID",
        "operationId": "GetCleaningRun",
        "parameters": [
          {
            "name": "cleaningRunId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningRun"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cleaning runs"
        ],
        "summary": "Deletes a cleaning run by its ID",
        "description": "Deletes a cleaning run by its ID",
        "parameters": [
          {
            "name": "cleaningRunId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cleaning_runs/{cleaningRunId}/nextRoom": {
      "get": {
        "tags": [
          "Cleaning runs"
        ],
        "summary": "Retrieves the next room to be cleaned in a cleaning run.",
        "description": "This method retrieves the next room to be cleaned in a cleaning run. It does this by finding the cleaning run in\r\nthe database,\r\ngetting the starting room of the cleaning run, and then finding the next room in the database that has a cleaning\r\ntask due.\r\nIf no such room is found, it returns a NotFound result.",
        "parameters": [
          {
            "name": "cleaningRunId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/cleaning_runs/{cleaningRunId}/phase": {
      "patch": {
        "tags": [
          "Cleaning runs"
        ],
        "summary": "Updates the phase of a cleaning run.",
        "description": "This method updates the phase of a cleaning run. It does this by finding the cleaning run in the database,\r\nupdating its phase, and then saving the changes to the database.\r\nIf the cleaning run is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a 404 status code.",
        "parameters": [
          {
            "name": "cleaningRunId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "phase",
            "in": "query",
            "required": true,
            "style": "form",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningRun"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieves all products from the database.",
        "description": "This method retrieves all products from the database. It does this by selecting all products from the database and\r\nreturning them as a list.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Creates a new product in the database.",
        "description": "This method creates a new product in the database. It does this by creating a new product object with the provided\r\nproduct details,\r\nadding it to the database, and then saving the changes to the database.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieves a product from the database.",
        "description": "This method retrieves a product from the database. It does this by finding the product in the database using the\r\nprovided product ID.\r\nIf the product is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a 404 status code and an error\r\nmessage.\r\nIf the product is found, it returns an Microsoft.AspNetCore.Http.HttpResults.Ok`1 result with the product.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Updates a product in the database.",
        "description": "This method updates a product in the database. It does this by finding the product in the database using the\r\nprovided product ID.\r\nIf the product is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a 404 status code and an error\r\nmessage.\r\nIf the product is found, its properties are updated with the values from the provided product object and the\r\nchanges are saved.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Deletes a product from the database.",
        "description": "This method deletes a product from the database. It does this by finding the product in the database using the\r\nprovided product ID.\r\nIf the product is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a 404 status code and an error\r\nmessage.\r\nIf the product is found, it is removed from the database and the changes are saved.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rooms/{roomId}/refills": {
      "get": {
        "tags": [
          "Rooms",
          "Room refills"
        ],
        "summary": "Retrieves all room refills from the database.",
        "description": "This method retrieves all room refills from the database. It does this by selecting all room refills from the\r\ndatabase and returning them as a list.\r\nEach room refill in the list contains the associated product information and the refill amount.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoomRefill"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rooms",
          "Room refills"
        ],
        "summary": "Adds a list of room refills to the database.",
        "description": "This method adds a list of room refills to the database. It does this by finding the room in the database using the\r\nprovided room ID,\r\nand then adding each refill in the list to the database associated with the room.\r\nIf the room is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a 404 status code and an error\r\nmessage.\r\nIf the room is found and the refills are successfully added, it saves the changes to the database and returns an\r\nMicrosoft.AspNetCore.Http.HttpResults.Ok result.",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rooms/{roomId}/refills/{refillId}": {
      "get": {
        "tags": [
          "Rooms",
          "Room refills"
        ],
        "summary": "Retrieves a specific room refill from the database.",
        "description": "This method retrieves a specific room refill from the database. It does this by finding the room refill in the\r\ndatabase using the provided room ID and refill ID.\r\nIf the room refill is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.NotFound result.\r\nIf the room refill is found, it returns an Microsoft.AspNetCore.Http.HttpResults.Ok`1 result with the room refill.",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "refillId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoomRefill"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Rooms",
          "Room refills"
        ],
        "summary": "Deletes a room refill from the database.",
        "description": "This method deletes a room refill from the database. It does this by finding the room refill in the database using\r\nthe provided refill ID.\r\nIf the room refill is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.NotFound result.\r\nIf the room refill is found, it removes it from the database and saves the changes, then returns an\r\nMicrosoft.AspNetCore.Http.HttpResults.Ok result.",
        "parameters": [
          {
            "name": "refillId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/rooms/{roomId}/tasks": {
      "get": {
        "tags": [
          "Rooms",
          "Room tasks"
        ],
        "summary": "Retrieves all due room tasks from the database.",
        "description": "This method retrieves all due room tasks from the database. It does this by finding the room in the database using\r\nthe provided room ID,\r\nand then selecting all cleaning tasks for the room where the next due date is less than or equal to the current\r\ndate.\r\nIf the room is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a 404 status code and an error\r\nmessage.\r\nIf the room is found and the tasks are successfully retrieved, it returns an Microsoft.AspNetCore.Http.HttpResults.Ok`1 result with the\r\nlist of tasks.",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningTask"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rooms/{roomId}/tasks/{taskId}": {
      "get": {
        "tags": [
          "Rooms",
          "Room tasks"
        ],
        "summary": "Retrieves a specific room task from the database.",
        "description": "This method retrieves a specific room task from the database. It does this by finding the task in the database\r\nusing the provided task ID.\r\nIf the task is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a 404 status code and an error\r\nmessage.\r\nIf the task is found, it returns an Microsoft.AspNetCore.Http.HttpResults.Ok`1 result with the task.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningTask"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Rooms",
          "Room tasks"
        ],
        "summary": "Marks a room task as completed.",
        "description": "Deletes a room task by its ID",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rooms": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "Retrieves all rooms from the database.",
        "description": "This method retrieves all rooms from the database. It does this by selecting all rooms from the database and\r\nmapping them to the returnable room objects.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rooms"
        ],
        "summary": "Creates a new room in the database.",
        "description": "This method creates a new room in the database. It does this by checking if a room with the same number already\r\nexists in the database.\r\nIf a room with the same number already exists, it returns a Microsoft.AspNetCore.Http.HttpResults.Conflict result.\r\nIf a room with the same number does not exist, it creates a new room in the database with the number from the\r\nprovided room object, saves the changes, and then returns a Microsoft.AspNetCore.Http.HttpResults.CreatedAtRoute`1 result with the\r\ncreated room.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Room"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/rooms/{roomId}": {
      "get": {
        "tags": [
          "Rooms"
        ],
        "summary": "Retrieves a specific room from the database.",
        "description": "This method retrieves a specific room from the database. It does this by finding the room in the database using the\r\nprovided room ID.\r\nIf the room is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.NotFound result.\r\nIf the room is found, it returns an Microsoft.AspNetCore.Http.HttpResults.Ok`1 result with the room.",
        "operationId": "GetRoom",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Rooms"
        ],
        "summary": "Updates a specific room in the database.",
        "description": "This method updates a specific room in the database. It does this by finding the room in the database using the\r\nprovided room ID.\r\nIf the room is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.NotFound result.\r\nIf the room is found, it updates the room's number with the number from the provided room object, saves the\r\nchanges, and then returns an Microsoft.AspNetCore.Http.HttpResults.Ok`1 result with the updated room.",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Room"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Rooms"
        ],
        "summary": "Deletes a specific room from the database.",
        "description": "This method deletes a specific room from the database. It does this by finding the room in the database using the\r\nprovided room ID.\r\nIf the room is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.NotFound result.\r\nIf the room is found, it removes the room from the database, saves the changes, and then returns an\r\nMicrosoft.AspNetCore.Http.HttpResults.Ok result.",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieves all tasks from the database.",
        "description": "This method retrieves all tasks from the database. It does this by selecting all tasks from the database and\r\nmapping them to the returnable task objects using the CreateReturnTask method.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CleaningTask"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Adds a new task to the database.",
        "description": "This method adds a new task to the database. It does this by creating a new task in the database with the\r\nproperties from the provided task object.\r\nAfter the task is created, it returns an Microsoft.AspNetCore.Http.HttpResults.Ok`1 result with the created task.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningTask"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieves a specific task from the database.",
        "description": "This method retrieves a specific task from the database. It does this by finding the task in the database using the\r\nprovided task ID.\r\nIf the task is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a message indicating that the task was\r\nnot found and a 404 status code.\r\nIf the task is found, it creates a returnable task object with the properties from the found task and returns an\r\nMicrosoft.AspNetCore.Http.HttpResults.Ok`1 result with the returnable task.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningTask"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Updates a specific task in the database.",
        "description": "This method updates a specific task in the database. It does this by finding the task in the database using the\r\nprovided task ID.\r\nIf the task is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a message indicating that the task was\r\nnot found and a 404 status code.\r\nIf the task is found, it updates the task's properties with the properties from the provided task object, saves the\r\nchanges, and then returns an Microsoft.AspNetCore.Http.HttpResults.Ok`1 result with the updated task.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleaningTask"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CleaningTask"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Deletes a specific task from the database.",
        "description": "This method deletes a specific task from the database. It does this by finding the task in the database using the\r\nprovided task ID.\r\nIf the task is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a message indicating that the task was\r\nnot found and a 404 status code.\r\nIf the task is found, it removes the task from the database, saves the changes, and then returns an\r\nMicrosoft.AspNetCore.Http.HttpResults.Ok result.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/tasks/{taskId}/rooms": {
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Assigns rooms to a specific task in the database.",
        "description": "This method assigns rooms to a specific task in the database. It does this by finding the task and the rooms in the\r\ndatabase using the provided task ID and room IDs.\r\nIf the task or any of the rooms are not found, it returns a Microsoft.AspNetCore.Http.HttpResults.ProblemHttpResult with a message\r\nindicating that the task or the rooms were not found and a 404 status code.\r\nIf the task and all the rooms are found, it assigns the rooms to the task and returns an Microsoft.AspNetCore.Http.HttpResults.Ok result.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieves the rooms assigned to a specific task.",
        "description": "This method retrieves the rooms that are assigned to a specific task. It does this by finding the task in the\r\ndatabase using the\r\nprovided task ID.\r\nIf the task is not found, it returns a Microsoft.AspNetCore.Http.HttpResults.NotFound result.\r\nIf the task is found, it retrieves the rooms assigned to the task, converts them to returnable room objects, and\r\nreturns an\r\nMicrosoft.AspNetCore.Http.HttpResults.Ok`1 result with the list of returnable rooms.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets all users.",
        "description": "Fetches all users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a new user.",
        "description": "Updates a user by its ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a user by its ID",
        "description": "Fetches a user by its ID",
        "operationId": "GetUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a user by its ID",
        "description": "Updates a user by its ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user by its ID.",
        "description": "Deletes a user by its ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the current logged in user.",
        "description": "Deletes a user by its ID",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessTokenResponse": {
        "type": "object",
        "properties": {
          "tokenType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CleaningRun": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the cleaning run. This is read-only and cannot be set externally.",
            "format": "uuid",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "The date of the cleaning run.",
            "format": "date-time",
            "nullable": true
          },
          "cleaners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "The users who are assigned to the cleaning run.",
            "nullable": true
          },
          "cleanerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The unique identifiers of the users who are assigned to the cleaning run.",
            "nullable": true
          },
          "startingRoom": {
            "$ref": "#/components/schemas/Room"
          },
          "startingRoomId": {
            "type": "string",
            "description": "The unique identifier of the room where the cleaning run starts.",
            "format": "uuid",
            "nullable": true
          },
          "phase": {
            "$ref": "#/components/schemas/CleaningRunPhase"
          }
        },
        "additionalProperties": false,
        "description": "Represents a cleaning run DTO."
      },
      "CleaningRunPhase": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "CleaningTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the cleaning task. This is read-only.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the cleaning task.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the cleaning task. This can be null.",
            "nullable": true
          },
          "recurrenceInterval": {
            "type": "integer",
            "description": "The recurrence interval of the cleaning task. This can be null.",
            "format": "int32",
            "nullable": true
          },
          "onCheckout": {
            "type": "boolean",
            "description": "Indicates whether the cleaning task is on checkout."
          }
        },
        "additionalProperties": false,
        "description": "Represents a cleaning task DTO."
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "InfoRequest": {
        "type": "object",
        "properties": {
          "newEmail": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          },
          "oldPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InfoResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "isEmailConfirmed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "twoFactorRecoveryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the product. This is read-only.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the product.",
            "nullable": true
          },
          "inventoryQuantity": {
            "type": "integer",
            "description": "The quantity of the product in inventory.",
            "format": "int32"
          },
          "image": {
            "type": "string",
            "description": "The image of the product. This can be null.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a product DTO."
      },
      "RefreshRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResendConfirmationEmailRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "resetCode": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Role": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "Room": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the room. This is read-only.",
            "format": "uuid"
          },
          "roomNumber": {
            "type": "string",
            "description": "The number of the room.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a Room."
      },
      "RoomRefill": {
        "type": "object",
        "properties": {
          "item": {
            "$ref": "#/components/schemas/Product"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the room refill. This is write-only and can be null.",
            "format": "uuid",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the product item to be refilled in the room. This is required.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a RoomRefill."
      },
      "TwoFactorRequest": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "nullable": true
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "resetSharedKey": {
            "type": "boolean"
          },
          "resetRecoveryCodes": {
            "type": "boolean"
          },
          "forgetMachine": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TwoFactorResponse": {
        "type": "object",
        "properties": {
          "sharedKey": {
            "type": "string",
            "nullable": true
          },
          "recoveryCodesLeft": {
            "type": "integer",
            "format": "int32"
          },
          "recoveryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isTwoFactorEnabled": {
            "type": "boolean"
          },
          "isMachineRemembered": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the User.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the User.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The username of the User.",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "isAdUser": {
            "type": "boolean",
            "description": "true, if User is an AD user",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a User in the system."
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Token",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}
